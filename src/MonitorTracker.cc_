#include "MonitorTracker.hh"

MonitorTracker::MonitorTracker()
: nMarkers(4), cumulCount(0)
{
    params = cv::aruco::DetectorParameters::create();
    dictionary = cv::aruco::generateCustomDictionary(nMarkers,4,2);
    markerLength = 18;

    device = nullptr;
    capture = nullptr;
    color_image = nullptr;
    k4a_color_resolution_t color_resolution = K4A_COLOR_RESOLUTION_720P;
    k4a_device_open(0, &device);
    k4a_device_configuration_t config = K4A_DEVICE_CONFIG_INIT_DISABLE_ALL;
    config.color_format = K4A_IMAGE_FORMAT_COLOR_BGRA32;
    config.color_resolution = color_resolution;
    config.camera_fps = K4A_FRAMES_PER_SECOND_15;
    config.depth_mode = K4A_DEPTH_MODE_OFF;
    k4a_device_start_cameras(device, &config);
    k4a_device_get_calibration(device, config.depth_mode, config.color_resolution, &calib);

	string detParam = "../data/detector_params.yml";
    Set_Parameters(detParam);
    Read_Viewing_Camera_Pose("../data/000440922112_VIR(isocenter_to_camera).dat");

    ifstream ifs("monitor_a0.txt");
    if(!ifs.is_open()) {
        cout << "Unable to open monitor_a0.txt" << endl;
        cout << "Initialize monitor pose" << endl;
        char key = ' ';
        while (true) {
            k4a_device_get_capture(device, &capture, 1000);
            color_image = k4a_capture_get_color_image(capture);
            cv::Mat image = color_to_opencv(color_image);
            key = (char)cv::waitKey(1);
            if (Set_Initial_Pose(image))
                break;
            Render();
            
            k4a_capture_release(capture);
            k4a_image_release(color_image);
        }
        cv::destroyAllWindows();
        cout << "Save monitor_a0.txt" << endl;
    }
    else {
        cout << "Read monitor_a0.txt" << endl;
        string line;
        while(getline(ifs, line)) {
            stringstream ss(line);
            int id;
            float x, y, z, qx, qy, qz, qw;
            ss >> id >> x >> y >> z >> qx >> qy >> qz >> qw;
            Eigen::Vector3f t(x, y, z);
            Eigen::Quaternionf q(qw, qx, qy, qz); q.normalize();
            Eigen::Affine3f a = Eigen::Translation3f(t) * q;
            a0_cumuls[id] = a;
        }
        ifs.close();
    }
    A_monitor.setIdentity();
}

MonitorTracker::~MonitorTracker()
{
    cv::destroyAllWindows();
    k4a_device_close(device);
}

void MonitorTracker::Read_Viewing_Camera_Pose(string fileName)
{
    ifstream ifs(fileName);
    if(!ifs.is_open()) {
        cerr << fileName << " not found" << endl;
        exit(1);
    }
    string dump;
    float x,y,z,qx,qy,qz,qw;
    ifs >> dump >> qx >> qy >> qz >> qw;
    ifs >> dump >> x >> y >> z;
    Eigen::Quaternionf q(qw,qx,qy,qz); q.normalize();
    Eigen::Translation3f t(x*0.01,y*0.01,z*0.01);
    Eigen::Affine3f a = t * q;
    A_viewCam = a;
    A_viewCam_inverse = a.inverse();
    ifs.close();
}

void MonitorTracker::Set_Parameters(string detParam)
{
    double cx = calib.color_camera_calibration.intrinsics.parameters.param.cx;
    double cy = calib.color_camera_calibration.intrinsics.parameters.param.cy;
    double fx = calib.color_camera_calibration.intrinsics.parameters.param.fx;
    double fy = calib.color_camera_calibration.intrinsics.parameters.param.fy;
    double k1 = calib.color_camera_calibration.intrinsics.parameters.param.k1;
    double k2 = calib.color_camera_calibration.intrinsics.parameters.param.k2;
    double k3 = calib.color_camera_calibration.intrinsics.parameters.param.k3;
    double k4 = calib.color_camera_calibration.intrinsics.parameters.param.k4;
    double k5 = calib.color_camera_calibration.intrinsics.parameters.param.k5;
    double k6 = calib.color_camera_calibration.intrinsics.parameters.param.k6;
    double p1 = calib.color_camera_calibration.intrinsics.parameters.param.p1;
    double p2 = calib.color_camera_calibration.intrinsics.parameters.param.p2;
    camMatrix = (cv::Mat_<double>(3,3) << fx,0,cx, 0,fy,cy, 0,0,1);
    distCoeffs = (cv::Mat_<double>(1,8) << k1,k2,p1,p2,k3,k4,k5,k6);

    cv::FileStorage fs(detParam, cv::FileStorage::READ);
    if (!fs.isOpened())
        return;
    fs["adaptiveThreshWinSizeMin"] >> params->adaptiveThreshWinSizeMin;
    fs["adaptiveThreshWinSizeMax"] >> params->adaptiveThreshWinSizeMax;
    fs["adaptiveThreshWinSizeStep"] >> params->adaptiveThreshWinSizeStep;
    fs["adaptiveThreshConstant"] >> params->adaptiveThreshConstant;
    fs["minMarkerPerimeterRate"] >> params->minMarkerPerimeterRate;
    fs["maxMarkerPerimeterRate"] >> params->maxMarkerPerimeterRate;
    fs["polygonalApproxAccuracyRate"] >> params->polygonalApproxAccuracyRate;
    fs["minCornerDistanceRate"] >> params->minCornerDistanceRate;
    fs["minDistanceToBorder"] >> params->minDistanceToBorder;
    fs["minMarkerDistanceRate"] >> params->minMarkerDistanceRate;
    fs["cornerRefinementMethod"] >> params->cornerRefinementMethod;
    fs["cornerRefinementWinSize"] >> params->cornerRefinementWinSize;
    fs["cornerRefinementMaxIterations"] >> params->cornerRefinementMaxIterations;
    fs["cornerRefinementMinAccuracy"] >> params->cornerRefinementMinAccuracy;
    fs["markerBorderBits"] >> params->markerBorderBits;
    fs["perspectiveRemovePixelPerCell"] >> params->perspectiveRemovePixelPerCell;
    fs["perspectiveRemoveIgnoredMarginPerCell"] >> params->perspectiveRemoveIgnoredMarginPerCell;
    fs["maxErroneousBitsInBorderRate"] >> params->maxErroneousBitsInBorderRate;
    fs["minOtsuStdDev"] >> params->minOtsuStdDev;
    fs["errorCorrectionRate"] >> params->errorCorrectionRate;
}

bool MonitorTracker::Set_Initial_Pose(cv::Mat &image)
{
    image.copyTo(display);

    // detect markers
    vector<int> ids;
    vector<vector<cv::Point2f>> corners, rejected, cornersWhole;
    cv::aruco::detectMarkers(image, dictionary, corners, ids, params, rejected);
    
    cv::putText(display, to_string(ids.size()), cv::Point(10, 100), cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(255.f, 0.f, 0.f), 1.2);

    // compare with the previous result
    if (ids.size() == 4)
    {
        cv::aruco::drawDetectedMarkers(display, corners, ids);
        
        // check the state
        bool isNewPose(false);
        for (int i=0; i<ids.size(); i++)
        {
            vector<cv::Point2f> points;
            for (auto p: corners[i])
                points.push_back(cv::Point2f(p.x, p.y));
            cornersWhole.push_back(points);
            if (isNewPose)
                continue;
            if (corner_cumul.find(ids[i]) != corner_cumul.end())
            {
                cv::Point2f oldCen(0,0), newCen(0,0);
                for (int n=0; n<4; n++)
                {
                    newCen += points[n];
                    oldCen += corner_cumul[ids[i]][n];
                }
                cv::Point2f vec = oldCen - newCen;
                if (vec.dot(vec) > 40)
                {
                    corner_cumul.clear();
                    isNewPose = true;
                    cumulCount = 0;
                }
            }
        }
        for (int i=0; i<ids.size(); i++)
            corner_cumul[ids[i]] = cornersWhole[i];


        vector<cv::Vec3d> rvecs, tvecs; // must double
        cv::aruco::estimatePoseSingleMarkers(corners, markerLength, camMatrix, distCoeffs, rvecs, tvecs);
        
        vector<tuple<int, cv::Vec3d, cv::Vec3d>> poses;
        for (int i=0; i<ids.size(); i++)
            poses.push_back(make_tuple(ids[i], rvecs[i], tvecs[i]));
        // sort by id
        sort(poses.begin(), poses.end(), [](const tuple<int, cv::Vec3f, cv::Vec3f> &a, const tuple<int, cv::Vec3f, cv::Vec3f> &b) {
            return get<0>(a) < get<0>(b);
        });
        cumulCount++;

        map<int, cv::Vec3f> _tvecs;
        for (auto itr: poses) {
            int i = get<0>(itr);
            cv::Vec3f rr = get<1>(itr);
            cv::Vec3f tt = get<2>(itr);

            // rvec
            float angle = norm(rr);
            Eigen::Vector3f axis( rr(0) / angle, rr(1) / angle, rr(2) / angle );
            Eigen::Quaternionf q(Eigen::AngleAxisf(angle, axis));
            q.normalize();

            if (cumulCount > 1) {
                q0_cumuls[i] = q0_cumuls[i].slerp(1.f / (cumulCount + 1.f), q);
            }
            else {
                q0_cumuls[i] = q;
            }

            Eigen::AngleAxisf avg(q0_cumuls[i]);
            cv::Vec3f rvec;
            cv::eigen2cv(avg.axis(), rvec);
            rvec *= avg.angle();
            rvec0_cumuls[i] = rvec;

            // tvec
            _tvecs[i] += get<2>(poses[i]);
            if (cumulCount > 1) {
                _tvecs[i] += tvec0_cumuls[i] * (cumulCount - 1);
                _tvecs[i] /= (float)cumulCount;
            }
            tvec0_cumuls[i] = _tvecs[i];
            cv::cv2eigen(tvec0_cumuls[i], t0_cumuls[i]);

            cv::aruco::drawAxis(display, camMatrix, distCoeffs, rvec0_cumuls[i], tvec0_cumuls[i], markerLength * 0.5f);

            a0_cumuls[i].linear() = q0_cumuls[i].normalized().toRotationMatrix();
            a0_cumuls[i].translation() = t0_cumuls[i] * 0.01;
        }

        cv::putText(display, "Set initial pose ...", cv::Point(10, 20), cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(255.f, 0.f, 0.f), 1.2);
        cv::putText(display, "cummulated data #: " + to_string(cumulCount), cv::Point(10, 40), cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(255.f, 0.f, 0.f), 1.2);


        if (cumulCount > 100) {
            cv::putText(display, "Press 's' to finish initial setting", cv::Point(10, 60), cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(255.f, 0.f, 0.f), 1.2);
            char key = cv::waitKey(0);
            if (key == 's') {

                corner_cumul.clear();
                cumulCount = 0;
                cout << "'monitor_a0.txt' is saved" << endl;
                ofstream ofs("monitor_a0.txt");
                for (auto itr: a0_cumuls) {
                    int i = itr.first;
                    Eigen::Quaternionf q = Eigen::Quaternionf(itr.second.linear());
                    Eigen::Vector3f t = itr.second.translation();
                    ofs << i << " " << t.transpose() << " " << q.coeffs().transpose() << endl; 
                } ofs.close();
                return true;
            }
            else {
                corner_cumul.clear();
                cumulCount = 0;
            }
        }
    }
    else
    {
        corner_cumul.clear();
        cumulCount = 0;
    }

    return false;
}

void MonitorTracker::Process_Current_Frame(cv::Mat &image)
{
    image.copyTo(display);

    // detect markers
    vector<int> ids;
    vector<vector<cv::Point2f>> corners, rejected, cornersWhole;
    cv::aruco::detectMarkers(image, dictionary, corners, ids, params, rejected);
    
    if (ids.size() == 0)
        return;
    
    cv::aruco::drawDetectedMarkers(display, corners, ids);

    
    // check the status
    bool isNewPose(false);
    for (int i=0; i<ids.size(); i++)
    {
        vector<cv::Point2f> points;
        for (auto p: corners[i]) {
            points.push_back( cv::Point2f(p.x, p.y) );
        }
        cornersWhole.push_back(points);
        if (isNewPose)
            continue;
        if (corner_cumul.find(ids[i]) != corner_cumul.end())
        {
            cv::Point2f oldCen(0,0), newCen(0,0);
            for (int n=0; n<4; n++)
            {
                newCen += points[n];
                oldCen += corner_cumul[ids[i]][n];
            }
            cv::Point2f vec = oldCen - newCen;
            if (vec.dot(vec) > 40) // distance check
            {
                corner_cumul.clear();
                isNewPose = true;
                As.clear();
                rveci_cumuls.clear();
                tveci_cumuls.clear();
                ai_cumuls.clear();
                cumulCount = 0;
            }
        }

            
    }
    for (int i=0; i<ids.size(); i++)
        corner_cumul[ids[i]] = cornersWhole[i];

    vector<cv::Vec3d> rvecs, tvecs; // must double
    cv::aruco::estimatePoseSingleMarkers(corners, markerLength, camMatrix, distCoeffs, rvecs, tvecs);

    vector<tuple<int, cv::Vec3f, cv::Vec3f>> poses;
    for (int i=0; i<ids.size(); i++)
        poses.push_back(make_tuple(ids[i], rvecs[i], tvecs[i]));
    // sort by id
    sort(poses.begin(), poses.end(), [](const tuple<int, cv::Vec3f, cv::Vec3f> &a, const tuple<int, cv::Vec3f, cv::Vec3f> &b) {
        return get<0>(a) < get<0>(b);
    });
    cumulCount++;

    map<int, cv::Vec3f> _tvecs;
    for (auto itr: poses) {
        int i = get<0>(itr);
        cv::Vec3f rr = get<1>(itr);
        cv::Vec3f tt = get<2>(itr);

        // rvec
        float angle = norm(rr);
        Eigen::Vector3f axis( rr(0) / angle, rr(1) / angle, rr(2) / angle);
        Eigen::Quaternionf q(Eigen::AngleAxisf(angle, axis));
        q.normalize();

        if (cumulCount > 1) {
            qi_cumuls[i] = qi_cumuls[i].slerp(1.f/ (cumulCount + 1.f), q);                
        }
        else {
            qi_cumuls[i] = q;
        }

        Eigen::AngleAxisf avg(qi_cumuls[i]);
        cv::Vec3f rvec;
        cv::eigen2cv(avg.axis(), rvec);
        rvec *= avg.angle();
        rveci_cumuls[i] = rvec;

        // tvec
        _tvecs[i] += tt;
        if (cumulCount > 1) {
            _tvecs[i] += tveci_cumuls[i] * (cumulCount - 1);
            _tvecs[i] /= (float)cumulCount;
        }
        tveci_cumuls[i] = _tvecs[i];
        
        cv::cv2eigen(tveci_cumuls[i], ti_cumuls[i]);
        
        ai_cumuls[i].linear() = qi_cumuls[i].normalized().toRotationMatrix();
        ai_cumuls[i].translation() = ti_cumuls[i] * 0.01;


        if (ai_cumuls.find(i) != ai_cumuls.end()) {
            Eigen::Affine3f A = A_viewCam * ai_cumuls[i] * a0_cumuls[i].inverse() * A_viewCam_inverse;
            As.push_back( A );
            cv::aruco::drawAxis(display, camMatrix, distCoeffs, rveci_cumuls[i], tveci_cumuls[i], markerLength * 0.5f);
        }
    }
    if (As.size() > 0) {
        A_monitor = averaging_Affine3f(As);
    }
        

    cv::putText(display, "Tracking monitor ...", cv::Point(10, 20), cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(255.f, 0.f, 0.f), 1.2);
    cv::putText(display, "cummulated data #: " + to_string(cumulCount), cv::Point(10, 40), cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(255.f, 0.f, 0.f), 1.2);
    

}

void MonitorTracker::Render()
{
    cv::imshow("Render", display);
}



    // if (corner_prev.size() == ids.size())
    //     isCorners = true;
    // for (auto id: ids) {
    //     if (corner_prev.find(id) == corner_prev.end()) {
    //         isCorners = false;
    //         break;
    //     }
    // }

    // if (isCorners) {
    //     for (auto itr: corner_curr) {
    //         int id = itr.first;
    //         for (int n=0; n<4; n++) {
    //             cv::Point2f vec = corner_curr[id][n] - corner_prev[id][n];
    //             if (vec.dot(vec) > 4) {
    //                 // cout << n << " " << vec.dot(vec) << " obstructed" << endl;
    //                 // cout << corner_curr[id][n] << " " << corner_prev[id][n] << endl;
    //                 corner_prev = corner_curr;
    //                 corner_curr.clear();
    //                 return;
    //             }
    //         }
    //     }
    // }
    // corner_prev = corner_curr;
    // corner_curr.clear();